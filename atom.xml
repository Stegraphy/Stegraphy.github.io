<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stegraphy</title>
  
  <subtitle>陌上人如玉-公子世无双</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-08T05:23:34.883Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Steplc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis基础</title>
    <link href="http://yoursite.com/2020/02/08/Redis%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/02/08/Redis基础/</id>
    <published>2020-02-08T05:22:14.000Z</published>
    <updated>2020-02-08T05:23:34.883Z</updated>
    
    <content type="html"><![CDATA[<ul><li>启动Redis</li></ul><p><strong>输入命令redis-server.exe redis.windows.conf，出现下图证明Redis服务启动成功</strong></p><p>或者在任务管理器中找到服务Redis打开</p><ul><li><p>进入客户端</p><ul><li><p>可以在Redis的安装根目录下找到redis-cli.exe文件启动(我用的是这种方法)</p><p>或在cmd中先进入Redis的安装根目录用命令<strong>redis-cli.exe -h 192.168.10.61 -p 6379（注意换成自己的IP）</strong>的方式打开</p></li></ul></li><li><p><a href="https://segmentfault.com/a/1190000011821520" target="_blank" rel="noopener">基础命令教程</a></p></li><li><p>Redis基本数据类型</p><ul><li>String：最基本的数据类型，二进制安全</li><li>Hash：String元素组成的字典，适合用于储存对象<ul><li><code>hmset lilei name &quot;lilei&quot; age 26 tatile &quot;semior&quot;</code></li><li><code>hget lilei age</code></li></ul></li><li>List：列表，按照String元素插入顺序排序<ul><li><code>lpush mylist aaa</code></li><li><code>lrange mylist 0 10</code></li></ul></li><li>Set：String元素组成的无序集合，通过Hash表实现，不允许重复<ul><li><code>sadd myset aaa</code></li><li><code>smembers myset</code></li></ul></li><li>Sorted Set：通过分数来为集合中的成员进行从小到大的排序<ul><li><code>zadd myzset 3 abc</code></li><li><code>zadd myzset 2 abc</code></li><li><code>zrangebyscore myzset 0 10</code></li></ul></li><li>用于计数的HyperLogLog，用于支持存储地理位置信息的Geo</li></ul></li><li><p>使用keys对线上的业务的影响</p><ul><li>KEYS pattern：查找多有符合给定模式pattern的key<ul><li>KEYS指令一次性返回所有匹配的key</li><li>键的数量过大会使服务卡顿</li></ul></li></ul></li><li><p>从海量Key里查询出某一固定前缀的Key</p><ul><li>SCAN cursor[MATCH pattern] [COUNT count]<ul><li>基于游标的迭代器，需要基于上一次的游标延续之前的迭代过程</li><li>以0作为游标开始一次新的迭代，直到命令返回游标0完成一次遍历</li><li>不保证每次执行都返回某一个给定的元素，支持模糊查询</li><li>一次返回的数量不可控，只能是大概率符合count参数</li></ul></li></ul></li><li><p>如何使用Redis做异步队列</p><ul><li><p>使用List作为队列，RPUSH生产消息，LPOP消费消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rpush testlist aaa</span><br><span class="line">rpush testlist bbb</span><br><span class="line">rpush testlist ccc</span><br><span class="line">lpop testlist</span><br><span class="line">&quot;aaa&quot;</span><br><span class="line">lpop testlist</span><br><span class="line">&quot;bbb&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>- 缺点：没有等待队列里有值就直接消费- 弥补：可以通过在应用层引入Sllep机制去调用LPOP重试</code></pre><ul><li><p>BLPOP key[key…] timeout:阻塞直到队列有消息或者超时</p><ul><li><p>缺点：只提供一个消费者消费</p><p><code>blpop testlist 30</code></p></li></ul></li><li><p>pub/sub:主题订阅者模式</p><ul><li><p>发送者（pub)发送消息，订阅者（sub）接收消息</p></li><li><p>订阅者可以订阅任意数量的频道</p><p><img src="C:\Users\Stephy\AppData\Roaming\Typora\typora-user-images\1565060735320.png" alt="1565060735320"></p></li><li><p>缺点：消息的发布时无状态的，无法保证可达</p></li></ul></li></ul><ul><li><p>Redis如何做持久化</p><p><strong>RDB（快照）持久化：保存某个时间点的全量数据快照</strong></p><ul><li>SAVE：阻塞Redis的服务器进程，直到RDB文件被创建完毕</li><li>BGSAVE：Fork出一个子进程来创建RDB文件，不阻塞服务器进程</li></ul><p><strong>缺点</strong></p><ul><li>内存数据的全量同步，数据量大会由于I/O二严重影响性能</li><li>可能会因为Redis挂掉二丢失从当前至最近一次快照期间的数据</li></ul><p><strong>AOF（Append-Only-File）持久化：保存写状态</strong></p><ul><li><p>记录除了查询意外的所有变更数据库状态的指令</p></li><li><p>以append的形式追加保存到AOF文件中（增量）</p><p><strong>日志重写解决AOF文件大小不断增大的问题，原理如下：</strong></p><ul><li>[ ] 调用fork（），创建一个子进程</li><li>[ ] 子进程把新的AOF写到一个临时文件里，不依赖原来的AOF文件</li><li>[ ] 主进程持续将新的变动同时写到内存和原来的AOF里</li><li>[ ] 主进程获取子进程重写AOF的完成信号，往新AOF同步增量变动</li><li>[ ] 使用新的AOF文件替换掉旧的AOF文件</li></ul></li></ul></li></ul><p><strong>RDB和AOF的优缺点</strong></p><ul><li>RDB优点：全量数据快照，文件小，恢复快</li><li>RDB缺点：无法保存最近一次快照之后的数据</li><li>AOF优点：可读性高，适合保存增量数据，数据不易丢失</li><li>AOF缺点：文件体积大，恢复时间长</li></ul><p><strong>RDB-AOF混合持久化方式</strong></p><ul><li>BGSAVE做镜像全量持久化，AOF做增量持久化</li></ul><h4 id="使用PipeLine的好处"><a href="#使用PipeLine的好处" class="headerlink" title="使用PipeLine的好处"></a>使用PipeLine的好处</h4><ul><li>Pipeline和Linux的管道类似</li><li>Redis基于请求/响应模型，单个请求处理需要一一应答</li><li>Pipeline批量执行指令，节省多次IO返回的时间</li><li>有顺序依赖的指令建议分批发送</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;启动Redis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;输入命令redis-server.exe redis.windows.conf，出现下图证明Redis服务启动成功&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;或者在任务管理器中找到服务Redis打开&lt;/p&gt;
&lt;u
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础</title>
    <link href="http://yoursite.com/2020/02/08/Docker%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/02/08/Docker基础/</id>
    <published>2020-02-08T04:54:23.000Z</published>
    <updated>2020-02-08T04:56:01.957Z</updated>
    
    <content type="html"><![CDATA[<h3 id="技术基础（1）"><a href="#技术基础（1）" class="headerlink" title="技术基础（1）"></a>技术基础（1）</h3><h4 id="1-Git"><a href="#1-Git" class="headerlink" title="1.Git"></a>1.Git</h4><ul><li>git提交代码步骤<ul><li>初始化一个Git仓库，使用git init命令。</li><li>添加文件到Git仓库，分两步：<ol><li>使用命令git add <code>&lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li><li>使用命令git commit -m <code>&lt;message&gt;</code>，完成。</li></ol></li><li>建立远程库(在github或者码云上创建reposity)</li><li>将本地的库链接到远-&gt;终端中输入: <code>git remote add origin HTTPS链接</code></li><li>上传代码到远程库,上传之前最好先Pull一下,再执行命令: <code>git pull origin master</code></li><li><code>git push origin master</code></li></ul></li><li>分支 (猪齿鱼的三种分支方式)</li><li>要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。<ul><li>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</li></ul></li><li>Git鼓励大量使用分支：<ol><li>查看分支：git branch</li><li>创建分支：git branch <code>&lt;name&gt;</code></li><li>切换分支：git checkout <code>&lt;name&gt;</code></li><li>创建+切换分支：git checkout -b <code>&lt;name&gt;</code></li><li>合并某分支到当前分支：git merge <code>&lt;name&gt;</code></li><li>删除分支：git branch -d <code>&lt;name&gt;</code></li></ol></li><li>课后作业：本地生成ssh，配置到github，git clon + 项目 （通过ssh克隆）</li></ul><h4 id="2-1-maven项目指令打包运行"><a href="#2-1-maven项目指令打包运行" class="headerlink" title="2.1 maven项目指令打包运行"></a>2.1 maven项目指令打包运行</h4><p>1.问题<br>git在执行git add命令时出现以下警告：</p><p>warning: LF will be replaced by CRLF in test1.txt. The file will have its original line endings in working directory</p><p>2.原因<br>因为Git的换行符检查功能。LF是linux下的换行符，而CRLF是enter + 换行。<br>Git提供了一个换行符检查功能（core.safecrlf），可以在提交时检查文件是否混用了不同风格的换行符。这个功能的选项如下：</p><ul><li>false - 不做任何检查</li><li>warn - 在提交时检查并警告</li><li>true - 在提交时检查，如果发现混用则拒绝提交</li></ul><p>3.解决方法<br>Git可以在你提交时自动地把行结束符CRLF转换成LF，而在签出代码时把LF转换成CRLF。用core.autocrlf来打开此项功能，如果是在Windows系统上，把它设置成true，这样当签出代码时，LF会被转换成CRLF：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf true</span><br></pre></td></tr></table></figure><ul><li>项目打包问题<br><code>Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test (default-test) on project seckill: There are test failures.</code></li></ul><p>解决办法：<code>mvn clean package -Dmaven.test.skip=true</code><br>或者写入pom文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;  </span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;2.4.2&lt;/version&gt;  </span><br><span class="line">        &lt;configuration&gt;  </span><br><span class="line">          &lt;skipTests&gt;true&lt;/skipTests&gt;  </span><br><span class="line">        &lt;/configuration&gt;  </span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h3 id="mvn验证"><a href="#mvn验证" class="headerlink" title="mvn验证"></a>mvn验证</h3><ol><li>在本地开发环境安装mvn，并进行相关的设置</li><li>构建一个mvn项目，能够使用mvn指令将demo程序进行编译、打包、运行<ul><li>mvn compile (编译)</li><li>mvn clean（清洗）</li><li>mvn package （打包）</li></ul></li><li>使用mvn指令将编译文件进行清理，重新进行打包<ul><li>运行jar包命令：<br><code>java -jar spring-boot-webrestfulcurd-0.0.1-SNAPSHOT.jar</code></li></ul></li></ol><h3 id="3-docker-Componts"><a href="#3-docker-Componts" class="headerlink" title="3. docker Componts"></a>3. docker Componts</h3><h3 id="4-docker-安装mysql"><a href="#4-docker-安装mysql" class="headerlink" title="4.docker 安装mysql"></a>4.docker 安装mysql</h3><ul><li>docker run -p 6379:6379 镜像id</li></ul><h3 id="5-制作dockerfile"><a href="#5-制作dockerfile" class="headerlink" title="5. 制作dockerfile"></a>5. 制作dockerfile</h3><ul><li>docker build -t nginx<br><code>Run echo &#39;&lt;h1&gt;Hello,Docker!&lt;.h1&gt; &gt; /usr/share/nginx/html/index.html</code></li></ul><hr><ul><li><p>Centens下查看软件安装目录<br><code>rpm -qla | grep docker</code></p></li><li><p>更改镜像加速地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctlenabledocker</span><br></pre></td></tr></table></figure><p>启用服务后，编辑    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/systemd/system/multi-user.target.wants/docker.service</span><br></pre></td></tr></table></figure><p>​    文件，找到    ExecStart=    这一 行，在这行最后添加加速器地址    —registry-mirror=&lt;加速器地址&gt;    ，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd--registry-mirror=https://jxus37ad.mirror.aliyuncs.com</span><br></pre></td></tr></table></figure><ul><li>系统下的docker.service地址： <code>/usr/lib/systemd/system/docker.service</code></li><li>重新加载配置并且重新启动。<br><code>$    sudo    systemctl    daemon-reload</code><br><code>$    sudo    systemctl    restart    docker</code></li></ul></li></ul><hr><h3 id="Centos环境下通过docker安装mysql并测试连接"><a href="#Centos环境下通过docker安装mysql并测试连接" class="headerlink" title="Centos环境下通过docker安装mysql并测试连接"></a>Centos环境下通过docker安装mysql并测试连接</h3><ul><li><p>$ docker search mysql (搜索mysql镜像)</p></li><li><p>在汉得内部私服网址找软件版本</p><ul><li><a href="https://registry.saas.hand-china.com/harbor/projects/9/repositories" target="_blank" rel="noopener">https://registry.saas.hand-china.com/harbor/projects/9/repositories</a></li></ul></li><li><p>1.拉取镜像文件下载<br><code>docker pull mysql:8.0</code></p></li><li><ol><li>运行镜像，设置root账号初始密码（123456），映射本地宿主机端口3308到Docker端口3306。测试过程没有挂载本地数据盘：</li></ol><p><code>docker run -it --rm --name mysql -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -d mysql</code></p></li><li><ol><li>查看已运行的容器<br><code>docker ps -a</code></li></ol></li><li><ol><li>进入mysql容器：<br><code>docker exec -it mysql /bin/bash</code></li></ol></li><li><ol><li><p>在容器内登陆Mysql:<br><code>mysql -uroot -p123456</code></p><ul><li>查看用户信息</li></ul><p><code>select host,user,plugin,authentication_string from mysql.user;</code></p><ul><li>备注：host为 % 表示不限制ip localhost表示本机使用 plugin非mysql_native_password 则需要修改密码</li></ul><p><code>ALTER user &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</code></p><ul><li>更新配置<br><code>FLUSH PRIVILEGES;</code></li></ul></li></ol></li><li><p>查询3308端口是否对外开放<br><code>firewall-cmd --query-port=3308/tcp</code></p></li><li><p>使端口3308对外开放端口<br><code>firewall-cmd --add-port=3308/tcp --permanent</code></p></li><li><p>主机navicat测试连接<br><strong>注意</strong></p><ol><li>连接主机地址为虚拟机 ip addr下的网卡地址：<br><code>ens32: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 00:0c:29:b4:70:d1 brd ff:ff:ff:ff:ff:ff inet **192.168.174.128/24 brd 192.168.174.255** scope global noprefixroute dynamic ens32</code></li></ol><ul><li>停止docker项目<ul><li><code>docker stop mysql</code></li></ul></li></ul></li><li><p>问题：Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</p><ul><li>解决办法重启服务：<code>service docker restart</code></li></ul></li></ul><p>docker运行jar包</p><ol><li><p>将jar包存放于指定文件夹，在同级目录创建dockerfile文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">MAINTAINER wangixang</span><br><span class="line">VOLUME /tmp</span><br><span class="line">#  简化 jar 的名字路径</span><br><span class="line">ADD spring-boot-webrestfulcurd-0.0.1-SNAPSHOT.jar app.jar</span><br><span class="line"></span><br><span class="line"># 执行 java -jar 命令 （CMD：在启动容器时才执行此行。RUN：构建镜像时就执行此行）</span><br><span class="line">RUN bash -c &apos;touch /app.jar&apos;</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure></li><li><p>构建镜像文件<br><code>docker build -t spring .</code><br>此行命令最后有一个点，表示使用当前上下文中的 dockerfile 文件<br>构建镜像，-t ：给镜像取名为 spring</p></li><li><p>运行容器<br><code>docker run -d -p 9091:9090 --name spring spring:latest</code></p></li></ol><ul><li><p>运行过程中遇到的问题</p><ol><li>jar从主机拖入到宿主机损坏，导致容器启动失败，一直是Exited (1)状态。需要在主机下载winscp软件传送jar包到虚拟机</li><li>端口占用错误<br><img src="https://raw.githubusercontent.com/Stegraphy/Stegraphy.github.io/master/img/porterr.png" alt="porterr"></li></ol><ul><li>原因:<br>docker服务启动时定义的自定义链DOCKER由于某种原因被清掉<br>重启docker服务及可重新生成自定义链DOCKER</li><li>解决方式：重启docker容器更改port映射端口<br><code>systemctl restart docker</code></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;技术基础（1）&quot;&gt;&lt;a href=&quot;#技术基础（1）&quot; class=&quot;headerlink&quot; title=&quot;技术基础（1）&quot;&gt;&lt;/a&gt;技术基础（1）&lt;/h3&gt;&lt;h4 id=&quot;1-Git&quot;&gt;&lt;a href=&quot;#1-Git&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Choerodon敏捷</title>
    <link href="http://yoursite.com/2019/11/09/Choerodon%E6%95%8F%E6%8D%B7&amp;DevOps/"/>
    <id>http://yoursite.com/2019/11/09/Choerodon敏捷&amp;DevOps/</id>
    <published>2019-11-09T14:01:40.000Z</published>
    <updated>2020-02-08T04:53:08.369Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Choerodon敏捷"><a href="#Choerodon敏捷" class="headerlink" title="Choerodon敏捷"></a>Choerodon敏捷</h3><ul><li>周一计划会议（user，ui，全体开发）<ol><li>产品经理新建待办事项（排好迭代需要做什么事）讲述功能</li><li>提供哪些接口，逻辑，怎么返回数据</li><li>子任务对故事的拆分</li></ol></li></ul><h3 id="DevOps介绍"><a href="#DevOps介绍" class="headerlink" title="DevOps介绍"></a>DevOps介绍</h3><ul><li>什么是DevOps</li><li>为什么使用DevOps<ul><li>运维早期参与开发</li><li>开发接触运维</li></ul></li><li>怎样使用DevOps</li></ul><h3 id="DevOps流程"><a href="#DevOps流程" class="headerlink" title="DevOps流程"></a>DevOps流程</h3><ol><li>计划</li><li>编程</li><li>构建</li><li>测试</li><li>发布</li><li>运维</li></ol><h3 id="DevOps方法"><a href="#DevOps方法" class="headerlink" title="DevOps方法"></a>DevOps方法</h3><ul><li>开发测试</li><li>控制</li><li>持续测试</li><li>持续发布和部署</li><li>监控（数据采集、日志）</li></ul><h3 id="DevOps技术"><a href="#DevOps技术" class="headerlink" title="DevOps技术"></a>DevOps技术</h3><ul><li>基础设施即代码</li><li>交付通道</li><li>部署自动化</li><li>发布管理</li></ul><h3 id="DevOps工具"><a href="#DevOps工具" class="headerlink" title="DevOps工具"></a>DevOps工具</h3><h3 id="基于云原生的PaaS平台"><a href="#基于云原生的PaaS平台" class="headerlink" title="基于云原生的PaaS平台"></a>基于云原生的PaaS平台</h3><ul><li>DevOps/Agile</li><li>持续交付</li><li>微服务<ul><li>松散耦合的组件；无需要等待其他组件自动化部署</li></ul></li><li>容器<ul><li>一次构建，随处运行，提供了最大的可移植性</li></ul></li></ul><h3 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h3><ul><li>应用<ul><li>应用模板</li><li>版本控制</li><li>应用发布</li><li>应用市场</li></ul></li></ul><h3 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a>持续交付</h3><ul><li>Gitlab</li><li>Gitlab CI</li><li>CD Server</li><li>环境管理</li></ul><h3 id="分支管理与版本控制"><a href="#分支管理与版本控制" class="headerlink" title="分支管理与版本控制"></a>分支管理与版本控制</h3><ul><li>GitFlow、GitHubFlow、GitLabFlow<ol><li>master：主分支，用于版本持续发布</li><li>develop：开发分支</li><li>feature：特性分支，用于日常开发时切出分支进行单功能开发</li><li>bugfix： 故障修补分支</li><li>release：发布分支</li><li>hotfix： 热修分支，用于产品发布后修复缺陷</li><li>custom： 自定义分支</li></ol></li><li>版本格式：主。次。修<ul><li>主版本号：次版本号：修订号</li></ul></li></ul><h3 id="组织架构调整"><a href="#组织架构调整" class="headerlink" title="组织架构调整"></a>组织架构调整</h3><h3 id="Agile-DevOps-部分规范示例"><a href="#Agile-DevOps-部分规范示例" class="headerlink" title="Agile/DevOps-部分规范示例"></a>Agile/DevOps-部分规范示例</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Choerodon敏捷&quot;&gt;&lt;a href=&quot;#Choerodon敏捷&quot; class=&quot;headerlink&quot; title=&quot;Choerodon敏捷&quot;&gt;&lt;/a&gt;Choerodon敏捷&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;周一计划会议（user，ui，全体开发）&lt;ol&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/categories/%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="Choerodon" scheme="http://yoursite.com/tags/Choerodon/"/>
    
      <category term="敏捷" scheme="http://yoursite.com/tags/%E6%95%8F%E6%8D%B7/"/>
    
      <category term="DevOps" scheme="http://yoursite.com/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/09/hello-world/"/>
    <id>http://yoursite.com/2019/11/09/hello-world/</id>
    <published>2019-11-09T02:25:42.733Z</published>
    <updated>2019-11-09T15:58:36.096Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
